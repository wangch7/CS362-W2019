        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************************************************
        -:    2:** cardtest3.c
        -:    3:** This card test is designed to test card Great Hall.
        -:    4:** Great Hall - add 1 card and add 1 action.
        -:    5:**
        -:    6:** Include the following lines in makefile:
        -:    7:** cardtest3: cardtest3.c dominion.o rngs.o
        -:    8:**      gcc -o cardtest3 -g  cardtest3.c dominion.o rngs.o $(CFLAGS)
        -:    9:*************************************************************************************/
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:#include <stdlib.h>
        -:   18:
        -:   19:#define TESTCARD "Great Hall"
        -:   20:
        -:   21:int main() 
        -:   22:{
        -:   23:	struct gameState G, testG;
        1:   24:    int player = 0, numPlayers = 0;
        1:   25:    int seed = 1000;
        1:   26:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   27:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   28:			sea_hag, tribute, smithy, council_room};
        -:   29:
        -:   30:
        1:   31:	printf ("\n--------------------Start Testing Card: %s --------------------\n", TESTCARD);
        -:   32:
        8:   33:	for(numPlayers = 2; numPlayers < 5; numPlayers++)
        -:   34:	{
        3:   35:		printf ("\nTesting %d players.\n", numPlayers);
        -:   36:		
        -:   37:		// initialize a game state and player cards.
        3:   38:		initializeGame(numPlayers, k, seed, &G);
        -:   39:		// copy game state to test state for comparison later.
        3:   40:		memcpy(&testG, &G, sizeof(struct gameState));
        3:   41:		cardEffect(great_hall, choice1, choice2, choice3, &G, handpos, &bonus);
        3:   42:		player = whoseTurn(&testG);
        -:   43:
        -:   44:		// Test1: Check if Great Hall card is played. If so, played card count should incremeted by 1.
        3:   45:		printf("Testing card count after Great Hall is played.\n");
        3:   46:		if(testG.playedCardCount == G.playedCardCount - 1)
        -:   47:		{
        3:   48:			printf("	TEST PASSED - played card count current = %d. Expected = %d; Actual = %d.\n", testG.playedCardCount, testG.playedCardCount + 1, G.playedCardCount);
        3:   49:		}
        -:   50:		else
        -:   51:		{
    #####:   52:			printf("	TEST FAILED - played card count current = %d. Expected = %d; Actual = %d.\n", testG.playedCardCount, testG.playedCardCount + 1, G.playedCardCount);
        -:   53:		}
        3:   54:		printf("\n");
        -:   55:
        -:   56:		// Test2: Check if hand count after Great Hall is played. It should remain the same - discard one and gain one.
        3:   57:		printf("Testing hand count after Great Hall is played.\n");
        3:   58:		if(testG.handCount[player] == G.handCount[player] + 1 - 1)
        -:   59:		{
        3:   60:			printf("	TEST PASSED - hand count current = %d. Expected = %d; Actual = %d.\n", testG.handCount[player], testG.handCount[player] + 1 - 1, G.handCount[player]);
        3:   61:		}
        -:   62:		else
        -:   63:		{
    #####:   64:			printf("	TEST FAILED - hand count current = %d. Expected = %d; Actual = %d.\n", testG.handCount[player], testG.handCount[player] + 1 - 1, G.handCount[player]);
        -:   65:		}
        3:   66:		printf("\n");
        -:   67:		
        -:   68:		// Test2: Check if Action is added by 1.
        3:   69:		printf("Checking Action is added +1.\n");
        3:   70:		if(testG.numActions == G.numActions - 1)
        -:   71:		{
        3:   72:			printf("	TEST PASSED - action count current = %d. Expected = %d; Actual = %d.\n", testG.numActions, testG.numActions + 1, G.numActions);
        3:   73:		}
        -:   74:		else
        -:   75:		{
    #####:   76:			printf("	TEST FAILED - action count current = %d. Expected = %d; Actual = %d.\n", testG.numActions, testG.numActions + 1, G.numActions);
        -:   77:		}
        3:   78:		printf("\n");
        -:   79:		
        -:   80:		
        -:   81:		// Test3: Discard Test: Check if Great Hall card was discarded
        3:   82:		printf("Checking if Great Hall is discarded after played.\n");
        3:   83:		int difference = testG.discardCount[player] - G.discardCount[player];
        3:   84:		switch(difference)
        -:   85:		{
        -:   86:			case 0:
        3:   87:				printf("	TEST PASSED - Great Hall was discarded.\n");	
        3:   88:				break;
        -:   89:
        -:   90:			default:
    #####:   91:				printf("	TEST FAILED - Great Hall was NOT discarded.\n");
    #####:   92:				break;
        -:   93:		}
        3:   94:		printf("\n");
        3:   95:	}
        -:   96:
        1:   97:	printf ("\n--------------------End Testing Card: %s --------------------\n", TESTCARD);
        1:   98:	printf("\nTEST SUCCESSFULLY COMPLETED\n");
        -:   99:
        1:  100:	return 0;
        -:  101:}
        -:  102:
        -:  103:
