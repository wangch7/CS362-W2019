        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************************************************
        -:    2:** randomtestcard1.c
        -:    3:** This card test is designed to test card steward.
        -:    4:** Steward - Choose one of the three options below：
        -:    5:**			 1） Gain 2 cards;
        -:    6:**			 2） Gain 2 coins;
        -:    7:**			 3） Trash 2 cards.
        -:    8:**
        -:    9:** This card test is build on a past student's test provided & approved by professor.
        -:   10:**
        -:   11:** Include the following lines in makefile:
        -:   12:** randomtestcard1: randomtestcard1.c dominion.o rngs.o
        -:   13:**      gcc -o randomtestcard1 -g  randomtestcard1.c dominion.o rngs.o $(CFLAGS)
        -:   14:*************************************************************************************/
        -:   15:
        -:   16:#include "dominion.h"
        -:   17:#include "dominion_helpers.h"
        -:   18:#include <string.h>
        -:   19:#include <stdio.h>
        -:   20:#include <assert.h>
        -:   21:#include "rngs.h"
        -:   22:#include <stdlib.h>
        -:   23:#include <time.h>
        -:   24:
        -:   25:#define TESTCARD "steward"
        -:   26:#define MAX_TESTS 1000
        -:   27:
        -:   28:int main() 
        -:   29:{
        1:   30:    int newCards = 0;
        1:   31:    int discarded = 1;
        1:   32:    int xtraCoins = 0;
        1:   33:    int shuffledCards = 0;
        -:   34:
        1:   35:    int i, j, m, t, testIndex = 0;
        1:   36:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   37:    //int choice = 0;
        -:   38:    int remove1, remove2;
        1:   39:    int seed = 1000;
        1:   40:    int numPlayers = 2;
        1:   41:    int thisPlayer = 0;
        -:   42:	struct gameState G, testG;
        1:   43:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   44:			sea_hag, tribute, smithy, council_room};
        -:   45:
        1:   46:	double time_spent = 0.0;
        -:   47:
        -:   48:
        1:   49:	printf ("\n--------------------Start Testing Card: %s --------------------\n", TESTCARD);
        -:   50:
        1:   51:	clock_t begin = clock();
        -:   52:
        -:   53:	// Generate 1000 random tests.
     2002:   54:	for(t = 0; t < MAX_TESTS; t++)
        -:   55:	{
        -:   56:		// initialize a game state and player cards
     1000:   57:		initializeGame(numPlayers, k, seed, &G);
        -:   58:		// randomly chooce one option from the Steward card.
     1000:   59:		choice1 = random() % 3 + 1;
     1000:   60:		testIndex++;
     1000:   61:		printf("Test# %d; Choice1 = %d\n", testIndex, choice1);
        -:   62:
        -:   63:
     1000:   64:		switch(choice1)
        -:   65:		{
        -:   66:			case 1:
        -:   67:				// ----------- TEST 1: choice1 = 1 = + 2 cards --------------
      354:   68:				printf("TEST 1: Choice1 = player chooses to gain 2 cards.\n");
        -:   69:
        -:   70:				// copy the game state to a test case
      354:   71:				memcpy(&testG, &G, sizeof(struct gameState));
        -:   72:				//choice1 = 1;
      354:   73:				printf("Player's current hand count = %d. deck count = %d. coins = %d\n", testG.handCount[thisPlayer], testG.deckCount[thisPlayer], testG.coins);
      354:   74:				cardEffect(steward, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   75:
      354:   76:				newCards = 2;
      354:   77:				xtraCoins = 0;
      354:   78:				printf("New hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
      354:   79:				printf("New deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
      354:   80:				printf("New coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
      708:   81:				assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
      708:   82:				assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
      708:   83:				assert(testG.coins == G.coins + xtraCoins);
      354:   84:				printf("TEST 1 PASSED.\n");
      354:   85:				printf("\n");
      354:   86:				break;
        -:   87:
        -:   88:			case 2:
        -:   89:				// ----------- TEST 2: choice1 = 2 = + 2 coins --------------
      305:   90:				printf("TEST 2: choice1 = player chooses to gain 2 coins\n");
        -:   91:
        -:   92:				// copy the game state to a test case
      305:   93:				memcpy(&testG, &G, sizeof(struct gameState));
        -:   94:				//choice1 = 2;
      305:   95:				printf("Player's current hand count = %d. deck count = %d. coins = %d\n", testG.handCount[thisPlayer], testG.deckCount[thisPlayer], testG.coins);
      305:   96:				cardEffect(steward, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   97:
      305:   98:				newCards = 0;
      305:   99:				xtraCoins = 2;
      305:  100:				printf("New hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
      305:  101:				printf("New deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
      305:  102:				printf("New coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
      610:  103:				assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
      610:  104:				assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
      610:  105:				assert(testG.coins == G.coins + xtraCoins);
      305:  106:				printf("TEST 2 PASSED.\n");
      305:  107:				printf("\n");
      305:  108:				break;
        -:  109:
        -:  110:			default:
        -:  111:				// ----------- TEST 3: choice1 = 3 = trash two cards --------------
      341:  112:				printf("TEST 3: choice1 = player chooses to trash 2 cards\n");
        -:  113:				//choice1 = 3;
        -:  114:
        -:  115:				// cycle through each eligible combination of 2 cards to trash
     3410:  116:				for (i = 1; i < G.handCount[thisPlayer]; i++) 
        -:  117:				{
     6820:  118:					for (j = i + 1; j < G.handCount[thisPlayer]; j++) 
        -:  119:					{
        -:  120:
     2046:  121:						G.hand[thisPlayer][0] = steward;
     2046:  122:						G.hand[thisPlayer][1] = curse;
     2046:  123:						G.hand[thisPlayer][2] = adventurer;
     2046:  124:						G.hand[thisPlayer][3] = remodel;
     2046:  125:						G.hand[thisPlayer][4] = great_hall;
        -:  126:
        -:  127:						// copy the game state to a test case
     2046:  128:						memcpy(&testG, &G, sizeof(struct gameState));
        -:  129:
     2046:  130:						printf("Starting cards: ");
    24552:  131:						for (m = 0; m < testG.handCount[thisPlayer]; m++) 
        -:  132:						{
    10230:  133:							printf("(%d)", testG.hand[thisPlayer][m]);
    10230:  134:						}
        -:  135:
     2046:  136:						choice2 = j;
     2046:  137:						choice3 = i;
     2046:  138:						remove1 = testG.hand[thisPlayer][i];
     2046:  139:						remove2 = testG.hand[thisPlayer][j];
     2046:  140:						cardEffect(steward, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:  141:
     2046:  142:						printf("; Cards removed: (%d)(%d); ", remove1, remove2);
     2046:  143:						printf("Ending cards: ");
        -:  144:
        -:  145:						// tests that the removed cards are no longer in the player's hand
    12276:  146:						for (m = 0; m < testG.handCount[thisPlayer]; m++)
        -:  147:						{
     4092:  148:							printf("(%d)", testG.hand[thisPlayer][m]);
     8184:  149:							assert(testG.hand[thisPlayer][m] != remove1);
     8184:  150:							assert(testG.hand[thisPlayer][m] != remove2);
     4092:  151:						}
        -:  152:
     2046:  153:						printf("; Expected ending cards: ");
    20460:  154:						for (m = 1; m < G.handCount[thisPlayer]; m++) 
        -:  155:						{
    14322:  156:							if (G.hand[thisPlayer][m] != G.hand[thisPlayer][i] && G.hand[thisPlayer][m] != G.hand[thisPlayer][j]) 
        -:  157:							{
     4092:  158:								printf("(%d)", G.hand[thisPlayer][m]);
     4092:  159:							}
     8184:  160:						}
     2046:  161:						printf("\n");
     2046:  162:					}
     1364:  163:					printf("\n");
        -:  164:				
     1364:  165:				}
      341:  166:				printf("TEST 3 PASSED.\n");
      341:  167:				printf("\n");
      341:  168:				break;
        -:  169:			}
     1000:  170:	}
        -:  171:
        1:  172:	printf ("\n--------------------End Testing Card: %s --------------------\n", TESTCARD);
        1:  173:	printf("\nTEST SUCCESSFULLY COMPLETED\n");
        -:  174:
        1:  175:	clock_t end = clock();
        1:  176:	time_spent += (double)(end - begin) / CLOCKS_PER_SEC;
        1:  177:	printf("Time elpased is %f seconds.\n", time_spent);
        -:  178:
        1:  179:	return 0;
        -:  180:}
        -:  181:
        -:  182:
