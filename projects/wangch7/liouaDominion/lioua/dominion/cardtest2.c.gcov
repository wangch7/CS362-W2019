        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************************************************
        -:    2:** cardtest2.c
        -:    3:** This card test is designed to test card Adventurer.
        -:    4:** Adventurer - Reveal cards from player's deck until reveal 2 Treasure cards.
        -:    5:**				Put those Treasure cards into player's hand and discard the other
        -:    6:**				revealed cards.
        -:    7:**
        -:    8:** Include the following lines in makefile:
        -:    9:** cardtest2: cardtest2.c dominion.o rngs.o
        -:   10:**      gcc -o cardtest2 -g  cardtest2.c dominion.o rngs.o $(CFLAGS)
        -:   11:*************************************************************************************/
        -:   12:
        -:   13:#include "dominion.h"
        -:   14:#include "dominion_helpers.h"
        -:   15:#include <string.h>
        -:   16:#include <stdio.h>
        -:   17:#include <assert.h>
        -:   18:#include "rngs.h"
        -:   19:#include <stdlib.h>
        -:   20:
        -:   21:#define TESTCARD "Adventurer"
        -:   22:
        -:   23:int main() 
        -:   24:{
        -:   25:	struct gameState G, testG;
        1:   26:    int player = 0, numPlayers = 2;
        1:   27:    int seed = 1000;
        -:   28:    // int i = 0, adventurerInHandTestG = 0, adventurerInHandG = 0;
        1:   29:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   30:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   31:			sea_hag, tribute, smithy, council_room};
        -:   32:
        -:   33:
        1:   34:	printf ("\n--------------------Start Testing Card: %s --------------------\n", TESTCARD);
        -:   35:
        -:   36:	// initialize a game state and player cards.
        1:   37:	initializeGame(numPlayers, k, seed, &G);
        1:   38:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   39:	cardEffect(adventurer, choice1, choice2, choice3, &G, handpos, &bonus);
        1:   40:	player = whoseTurn(&testG);
        -:   41:
        -:   42:
        -:   43:
        -:   44:	// Test1: Player hand count should +1 after Adventurer card is played. Gain 2 Treasure card and discard Adventurer card.
        1:   45:	printf("Testing hand count after Adventurer is played.\n");
        1:   46:	if(testG.handCount[player] + 1 == G.handCount[player])
        -:   47:	{
    #####:   48:		printf("	TEST PASSED - hand count is correct. Current hand count = %d. Expected hand count = %d; Actual hand count = %d.\n", testG.handCount[player], testG.handCount[player] + 2 - 1, G.handCount[player]);
    #####:   49:	}
        -:   50:	else
        -:   51:	{
        1:   52:		printf("	TEST FAILED - hand count is incorrect. Current hand count = %d. Expected hand count = %d; Actual hand count = %d.\n", testG.handCount[player], testG.handCount[player] + 2 - 1, G.handCount[player]);
        -:   53:	}
        1:   54:	printf("\n");
        -:   55:
        -:   56:
        -:   57:
        -:   58:	// Test2: Player deck count should -2 since 2 Treasure card is drawn.
        1:   59:	printf("Testing deck count after Adventurer is played.\n");
        1:   60:	if(testG.deckCount[player] == G.deckCount[player] + 2)
        -:   61:	{
    #####:   62:		printf("	TEST PASSED - deck count is correct. Deck count current = %d. Expected = %d; Actual = %d.\n", testG.deckCount[player], testG.deckCount[player] - 2, G.deckCount[player]);
    #####:   63:	}
        -:   64:	else
        -:   65:	{
        1:   66:		printf("	TEST FAILED - deck count is correct. Deck count current = %d. Expected = %d; Actual = %d.\n", testG.deckCount[player], testG.deckCount[player] - 2, G.deckCount[player]);
        -:   67:	}
        1:   68:	printf("\n");
        -:   69:
        -:   70:
        -:   71:
        -:   72:	// Test3: Check if Adventurer card is played. If so, playedCardCount should +1.
        1:   73:	printf("Testing played card count after Adventurer is played.\n");
        1:   74:	if(testG.playedCardCount == G.playedCardCount - 1)
        -:   75:	{
        1:   76:		printf("	TEST PASSED - Played card count current = %d. Expected = %d; Actual = %d.\n", testG.playedCardCount, testG.playedCardCount + 1, G.playedCardCount);
        1:   77:	}
        -:   78:	else
        -:   79:	{
    #####:   80:		printf("	TEST FAILED - Played card count current = %d. Expected = %d; Actual = %d.\n", testG.playedCardCount, testG.playedCardCount + 1, G.playedCardCount);
        -:   81:	}
        1:   82:	printf("\n");
        -:   83:
        -:   84:
        -:   85:
        -:   86:	// Test4: Check if Adventurer card is discarded.
        1:   87:	printf("Checking if Adventurer is discarded after played.\n");
        1:   88:	int difference = testG.discardCount[player] - G.discardCount[player];
        1:   89:	switch(difference)
        -:   90:	{
        -:   91:		case 0:
        1:   92:			printf("	TEST PASSED - Adventurer was discarded.\n");	
        1:   93:			break;
        -:   94:
        -:   95:		default:
    #####:   96:			printf("	TEST FAILED - Adventurer was NOT discarded.\n");
    #####:   97:			break;
        -:   98:	}
        1:   99:	printf("\n");
        -:  100:
        -:  101:
        -:  102:
        1:  103:	printf ("\n--------------------End Testing Card: %s --------------------\n", TESTCARD);
        1:  104:	printf("\nTEST SUCCESSFULLY COMPLETED\n");
        -:  105:
        1:  106:	return 0;
        -:  107:}
        -:  108:
