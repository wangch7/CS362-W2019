        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************************************************
        -:    2:** unittest2.c
        -:    3:** This unit test is designed to test getCost function.
        -:    4:**
        -:    5:** Include the following lines in makefile:
        -:    6:** unittest2: unittest2.c dominion.o rngs.o
        -:    7:**      gcc -o unittest2 -g  unittest2.c dominion.o rngs.o $(CFLAGS)
        -:    8:*************************************************************************************/
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <stdlib.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:
        -:   18:
        -:   19:
        -:   20:struct Card
        -:   21:{
        -:   22:	char name[50];
        -:   23:	int cost;
        -:   24:	int position;
        -:   25:};
        -:   26:
        -:   27:
        -:   28:
        -:   29:int main() 
        -:   30:{	
        -:   31:	struct Card cardArray[27];
        -:   32:	int cardCost;
        1:   33:	int i = 0, j = 0;
        -:   34:
        -:   35:	// Initialize cardArray to all possible cards.
        1:   36:	strcpy(cardArray[0].name, "curse");
        1:   37:	cardArray[0].cost = 0;
        1:   38:	strcpy(cardArray[1].name, "estate");
        1:   39:	cardArray[1].cost = 2;
        1:   40:	strcpy(cardArray[2].name, "duchy");
        1:   41:	cardArray[2].cost = 5;
        1:   42:	strcpy(cardArray[3].name, "province");
        1:   43:	cardArray[3].cost = 8;
        1:   44:	strcpy(cardArray[4].name, "copper");
        1:   45:	cardArray[4].cost = 0;
        1:   46:	strcpy(cardArray[5].name, "silver");
        1:   47:	cardArray[5].cost = 3;
        1:   48:	strcpy(cardArray[6].name, "gold");
        1:   49:	cardArray[6].cost = 6;
        1:   50:	strcpy(cardArray[7].name, "adventurer");
        1:   51:	cardArray[7].cost = 6;
        1:   52:	strcpy(cardArray[8].name, "council_room");
        1:   53:	cardArray[8].cost = 5;
        1:   54:	strcpy(cardArray[9].name, "feast");
        1:   55:	cardArray[9].cost = 4;
        1:   56:	strcpy(cardArray[10].name, "gardens");
        1:   57:	cardArray[10].cost = 4;
        1:   58:	strcpy(cardArray[11].name, "mine");
        1:   59:	cardArray[11].cost = 5;
        1:   60:	strcpy(cardArray[12].name, "remodel");
        1:   61:	cardArray[12].cost = 4;
        1:   62:	strcpy(cardArray[13].name, "smithy");
        1:   63:	cardArray[13].cost = 4;
        1:   64:	strcpy(cardArray[14].name, "village");
        1:   65:	cardArray[14].cost = 3;
        1:   66:	strcpy(cardArray[15].name, "baron");
        1:   67:	cardArray[15].cost = 4;
        1:   68:	strcpy(cardArray[16].name, "great_hall");
        1:   69:	cardArray[16].cost = 3;
        1:   70:	strcpy(cardArray[17].name, "minion");
        1:   71:	cardArray[17].cost = 5;
        1:   72:	strcpy(cardArray[18].name, "steward");
        1:   73:	cardArray[18].cost = 3;
        1:   74:	strcpy(cardArray[19].name, "tribute");
        1:   75:	cardArray[19].cost = 5;
        1:   76:	strcpy(cardArray[20].name, "ambassador");
        1:   77:	cardArray[20].cost = 3;
        1:   78:	strcpy(cardArray[21].name, "cutpurse");
        1:   79:	cardArray[21].cost = 4;
        1:   80:	strcpy(cardArray[22].name, "embargo");
        1:   81:	cardArray[22].cost = 2;
        1:   82:	strcpy(cardArray[23].name, "outpost");
        1:   83:	cardArray[23].cost = 5;
        1:   84:	strcpy(cardArray[24].name, "salvager");
        1:   85:	cardArray[24].cost = 4;
        1:   86:	strcpy(cardArray[25].name, "sea_hag");
        1:   87:	cardArray[25].cost = 4;
        1:   88:	strcpy(cardArray[26].name, "treasure_map");
        1:   89:	cardArray[26].cost = 4;
        -:   90:
       54:   91:	for(j = 0; j < 26; j++)
        -:   92:	{
       26:   93:		cardArray[j].position = j;
       26:   94:	}
        -:   95:
        -:   96:
        1:   97:    printf ("\n--------------------Start Testing getCost()--------------------\n");
        -:   98:
       50:   99:    for(i = 2; i < 26; i++)
        -:  100:    {
       24:  101:		cardCost = getCost(cardArray[i].position);
       24:  102:		printf("Cost for card %s = %d, expected card cost = %d\n", cardArray[i].name, cardCost, cardArray[i].cost);
       48:  103:		assert(cardCost == cardArray[i].cost);
       24:  104:	}
        -:  105:
        1:  106:	printf("TEST SUCCESSFULLY COMPLETED");
        1:  107:	printf ("\n--------------------End Testing getCost()--------------------\n");
        -:  108:
        1:  109:	return 0;
        -:  110:}
        -:  111:
        -:  112:
        -:  113:
        -:  114:
        -:  115:
