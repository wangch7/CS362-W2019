        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************************************************
        -:    2:** cardtest4.c
        -:    3:** This card test is designed to test card steward.
        -:    4:** Steward - Choose one of the three options below：
        -:    5:**			 1） Gain 2 cards;
        -:    6:**			 2） Gain 2 coins;
        -:    7:**			 3） Trash 2 cards.
        -:    8:**
        -:    9:** This card test is build on a past student's test provided & approved by professor.
        -:   10:**
        -:   11:** Include the following lines in makefile:
        -:   12:** cardtest4: cardtest4.c dominion.o rngs.o
        -:   13:**      gcc -o cardtest4 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:   14:*************************************************************************************/
        -:   15:
        -:   16:#include "dominion.h"
        -:   17:#include "dominion_helpers.h"
        -:   18:#include <string.h>
        -:   19:#include <stdio.h>
        -:   20:#include <assert.h>
        -:   21:#include "rngs.h"
        -:   22:#include <stdlib.h>
        -:   23:
        -:   24:#define TESTCARD "steward"
        -:   25:
        -:   26:int main() 
        -:   27:{
        1:   28:    int newCards = 0;
        1:   29:    int discarded = 1;
        1:   30:    int xtraCoins = 0;
        1:   31:    int shuffledCards = 0;
        -:   32:
        -:   33:    int i, j, m;
        1:   34:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   35:    int remove1, remove2;
        1:   36:    int seed = 1000;
        1:   37:    int numPlayers = 2;
        1:   38:    int thisPlayer = 0;
        -:   39:	struct gameState G, testG;
        1:   40:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   41:			sea_hag, tribute, smithy, council_room};
        -:   42:
        -:   43:
        1:   44:	printf ("\n--------------------Start Testing Card: %s --------------------\n", TESTCARD);
        -:   45:
        -:   46:	// initialize a game state and player cards
        1:   47:	initializeGame(numPlayers, k, seed, &G);
        -:   48:
        -:   49:	// ----------- TEST 1: choice1 = 1 = + 2 cards --------------
        1:   50:	printf("TEST 1: Choice1 = player chooses to gain 2 cards.\n");
        -:   51:
        -:   52:	// copy the game state to a test case
        1:   53:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   54:	choice1 = 1;
        1:   55:	printf("Player's current hand count = %d. deck count = %d. coins = %d\n", testG.handCount[thisPlayer], testG.deckCount[thisPlayer], testG.coins);
        1:   56:	cardEffect(steward, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   57:
        1:   58:	newCards = 2;
        1:   59:	xtraCoins = 0;
        1:   60:	printf("New hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   61:	printf("New deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   62:	printf("New coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        2:   63:	assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
        2:   64:	assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
        2:   65:	assert(testG.coins == G.coins + xtraCoins);
        1:   66:	printf("TEST 1 PASSED.\n");
        1:   67:	printf("\n");
        -:   68:
        -:   69:	// ----------- TEST 2: choice1 = 2 = + 2 coins --------------
        1:   70:	printf("TEST 2: choice1 = player chooses to gain 2 coins\n");
        -:   71:
        -:   72:	// copy the game state to a test case
        1:   73:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   74:	choice1 = 2;
        1:   75:	printf("Player's current hand count = %d. deck count = %d. coins = %d\n", testG.handCount[thisPlayer], testG.deckCount[thisPlayer], testG.coins);
        1:   76:	cardEffect(steward, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   77:
        1:   78:	newCards = 0;
        1:   79:	xtraCoins = 2;
        1:   80:	printf("New hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   81:	printf("New deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   82:	printf("New coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        2:   83:	assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
        2:   84:	assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
        2:   85:	assert(testG.coins == G.coins + xtraCoins);
        1:   86:	printf("TEST 2 PASSED.\n");
        1:   87:	printf("\n");
        -:   88:
        -:   89:	// ----------- TEST 3: choice1 = 3 = trash two cards --------------
        -:   90:
        1:   91:	printf("TEST 3: choice1 = player chooses to trash 2 cards\n");
        1:   92:	choice1 = 3;
        -:   93:
        -:   94:	// cycle through each eligible combination of 2 cards to trash
       10:   95:	for (i = 1; i < G.handCount[thisPlayer]; i++) 
        -:   96:	{
       20:   97:		for (j = i + 1; j < G.handCount[thisPlayer]; j++) 
        -:   98:		{
        -:   99:
        6:  100:			G.hand[thisPlayer][0] = steward;
        6:  101:			G.hand[thisPlayer][1] = curse;
        6:  102:			G.hand[thisPlayer][2] = adventurer;
        6:  103:			G.hand[thisPlayer][3] = remodel;
        6:  104:			G.hand[thisPlayer][4] = great_hall;
        -:  105:
        -:  106:			// copy the game state to a test case
        6:  107:			memcpy(&testG, &G, sizeof(struct gameState));
        -:  108:
        6:  109:			printf("Starting cards: ");
       72:  110:			for (m = 0; m < testG.handCount[thisPlayer]; m++) 
        -:  111:			{
       30:  112:				printf("(%d)", testG.hand[thisPlayer][m]);
       30:  113:			}
        -:  114:
        6:  115:			choice2 = j;
        6:  116:			choice3 = i;
        6:  117:			remove1 = testG.hand[thisPlayer][i];
        6:  118:			remove2 = testG.hand[thisPlayer][j];
        6:  119:			cardEffect(steward, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:  120:
        6:  121:			printf("; Cards removed: (%d)(%d); ", remove1, remove2);
        6:  122:			printf("Ending cards: ");
        -:  123:
        -:  124:			// tests that the removed cards are no longer in the player's hand
       36:  125:			for (m = 0; m < testG.handCount[thisPlayer]; m++)
        -:  126:			{
       12:  127:				printf("(%d)", testG.hand[thisPlayer][m]);
       24:  128:				assert(testG.hand[thisPlayer][m] != remove1);
       24:  129:				assert(testG.hand[thisPlayer][m] != remove2);
       12:  130:			}
        -:  131:
        6:  132:			printf("; Expected ending cards: ");
       60:  133:			for (m = 1; m < G.handCount[thisPlayer]; m++) 
        -:  134:			{
       42:  135:				if (G.hand[thisPlayer][m] != G.hand[thisPlayer][i] && G.hand[thisPlayer][m] != G.hand[thisPlayer][j]) 
        -:  136:				{
       12:  137:					printf("(%d)", G.hand[thisPlayer][m]);
       12:  138:				}
       24:  139:			}
        6:  140:			printf("\n");
        6:  141:		}
        4:  142:		printf("\n");
        4:  143:	}
        1:  144:	printf("TEST 3 PASSED.\n");
        1:  145:	printf("\n");
        -:  146:
        -:  147:
        1:  148:	printf ("\n--------------------End Testing Card: %s --------------------\n", TESTCARD);
        1:  149:	printf("\nTEST SUCCESSFULLY COMPLETED\n");
        -:  150:
        1:  151:	return 0;
        -:  152:}
        -:  153:
        -:  154:
